#!/usr/bin/env ruby

begin
  # Fetch the absolute path of the `lib/` directory.
  #
  # `__FILE__` is a method on the Kernel class to return
  # the absolute path of the file from which the method
  # is called. Here, it returns:
  # `bin/deploy/../../lib/`
  #
  # File#expand_path converts a path to an absolute path,
  # replacing any shortcuts like `~` and `..`.
  # Here, it converts the above string to:
  # `/home/user/flight-deploy/lib`
  lib_dir = File.expand_path(File.join(__FILE__, '../../lib'))
  # Add `lib_dir` to the $LOAD_PATH global variable.
  # The $LOAD_PATH variable is a list of directories that
  # the app can look through when you ask to load a specific
  # file, via the File class, the `require` method, etc.
  #
  # Array#unshift adds elements to the start of an array.
  # Unshifting the `lib_dir` path prioritises it over the
  # rest of the $LOAD_PATH array when looking for a file.
  $LOAD_PATH.unshift(lib_dir)

  # This bundler/gemfile logic ensures that we are loading
  # gems from the project directory instead of the user's
  # global system gem directory.
  ENV['BUNDLE_GEMFILE'] ||= File.join(__FILE__, '../../Gemfile')
  require 'rubygems'
  gem 'bundler', '2.1.4'
  require 'bundler'
  Bundler.setup(:default)

  require "deploy/cli"
  # Once all setup has been done, hand
  # over to the Deploy::CLI class.
  Deploy::CLI.run!(*ARGV)

rescue Interrupt
  # If the user interrupts the process in the split second
  # that the initial setup is going on, give them a clean
  # warning.
  $stderr.print "\nWARNING: Cancelled by user"

  raise SignalException.new(2)
end
